
//************************************************************************
//
//				This program is show how to using Lagrance insert
//				method to calculate an example of polynomial in 3 
//				base point.
//											   ----made by SeokHo
//
//************************************************************************
#include <stdio.h>


#include <gl/glut.h>
#include <math.h>

#define N 9
#define PI 3.1415926535

double ang_to_rad(double);	//trans degree to radian
void RenderScene(void);
void SetupRC(void);
void ChangeSize(int, int);


int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutCreateWindow("Points Example");
	glutReshapeFunc(ChangeSize);
	glutDisplayFunc(RenderScene);
	SetupRC();
	glutMainLoop();

	return 0;
}


void RenderScene(void)
{
	//init
	GLdouble X, Y, y[N], d[N][N], x[N], resul_d[N], item[N];
	GLint i, j, n;
	GLdouble ALPA[N];
	GLdouble ceta[N], eta[N], ksi[N];

	//..init	In this example, we calculate a quarter of ellipse
	for(i=0;i<N;i++)
	{
		ALPA[i] = ((double)i / (N-1)) * (PI / 2.0);
	//	printf("%lf\n", ALPA[i]);	//...check result
	}
	for(i=0;i<N;i++)
	{
		x[i] = 1.0 - cos(ALPA[i]);
		y[i] = 0.1 * sin(ALPA[i]);
	}
	for(i=0;i<N;i++)
	{
		d[i][0] = y[i];
	}
	//...calculate d value
	for(j=1;j<N;j++)
	{
		for(i=0;i<N-j;i++)
		{
			d[i][j] = (d[i+1][j-1] - d[i][j-1]) / (x[i+j] - x[i]);
		}
	}
	for(i=0;i<N;i++)
	{
		resul_d[i] = d[0][i];
	}
	
	// Clear the window with current clearing color
	glClear(GL_COLOR_BUFFER_BIT);
	// Call only once for all remaining points
	glColor3f(1.0f, 0.0f, 0.0f);
	glBegin(GL_LINE_STRIP);
		for(i=0;i<N;i++)
		{
			glVertex2f(x[i], y[i]);
		}
	glEnd();
	
	glColor3f(0.0f, 1.0f, 0.0f);
	glBegin(GL_POINTS);
		for(n=0;n<N*50;n++)
		{
			X = (double)n / (N*50);
			Y = 0.0;
			for(i=0;i<N;i++)
			{
				item[i] = 1.0;
			}
			for(i=1;i<N;i++)
			{
				for(j=0;j<i;j++)
				{
					item[i] *= (X - x[j]);
				}
				
				item[i] = item[i] * resul_d[i];		
				Y += item[i];
			}
			Y += resul_d[0];
			glVertex2f(X, Y);	
		}	
	// Done drawing points
	glEnd();
	// Flush drawing commands
	glFlush();
}

void SetupRC()
{
	// Black background
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f );
	// Set drawing color to green
}

void ChangeSize(int w, int h)
{
	GLfloat aspectRatio;

	// Prevent a divide by zero
	if(h == 0)
		h = 1;
		
	// Set Viewport to window dimensions
    glViewport(0, 0, w, h);

	// Reset coordinate system
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// Establish clipping volume (left, right, bottom, top, near, far)
	aspectRatio = (GLfloat)w / (GLfloat)h;
 //   if (w <= h) 
//		glOrtho (-1.0, 1.0, -1.0 / aspectRatio, 1.0 / aspectRatio, 1.0, -1.0);
  //  else 
//		glOrtho (-1.0 * aspectRatio, 1.0 * aspectRatio, -1.0, 1.0, 1.0, -1.0);

	if (w <= h) 
		glOrtho (0.0, 1.0, 0.0 / aspectRatio, 0.6 / aspectRatio, 1.0, -1.0);
    else 
		glOrtho (0.0 * aspectRatio, 1.0 * aspectRatio, 0.0, 0.6, 1.0, -1.0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

double ang_to_rad(double ANG)
{
	double temp_rad, temp_ang;
	temp_ang=ANG;
	temp_rad=(temp_ang*PI)/180;
	return temp_rad;
}
